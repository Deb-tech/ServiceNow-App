<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>false</active>
        <condition/>
        <conditional>false</conditional>
        <name>Synchronize services job</name>
        <run_as/>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:10:00</run_period>
        <run_start>2016-05-10 16:24:56</run_start>
        <run_time>1970-01-01 08:00:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[// ServiceNow script for fetching autodetected and monitored business services directly from Ruxit
// 
if(gs.getProperty('x_dynat_ruxit.sync_cmdb') == 'true') {
	gs.info("Dynatrace: start software services sync");
	var yourRuxitEnvironment = gs.getProperty('x_dynat_ruxit.environment').trim();
	var yourRuxitAPIKey = gs.getProperty('x_dynat_ruxit.api_key').trim(); 

	var restMessage = new sn_ws.RESTMessageV2();
	var apiUrl;
	if(gs.getProperty('x_dynat_ruxit.managed') == 'true') {
		apiUrl = gs.getProperty('x_dynat_ruxit.apiurl') + "/api/v1/entity/services/";
	}
	else {
		apiUrl = "https://" + yourRuxitEnvironment + ".live.dynatrace.com/api/v1/entity/services/";
	}

	restMessage.setHttpMethod('get');
	restMessage.setRequestHeader('Authorization', 'Api-Token ' + yourRuxitAPIKey);
	restMessage.setEndpoint(apiUrl);
	var response = restMessage.execute();
	status = response.getStatusCode();
	gs.info("Dynatrace: service sync REST call: " + status);
	if(status == 200) {
		var index = new GlideRecord("x_dynat_ruxit_entity_index"); 
		index.initialize();
		
		var p = new global.JSON().decode(response.getBody());
		// first mark all as non-operational
		var srv1 = new GlideRecord("cmdb_ci_service"); 
		srv1.addQuery('discovery_source', 'DYNATRACE');
		srv1.query();
		srv1.setValue('operational_status', 2);
		srv1.updateMultiple();
		
		// now insert or update new infos
		var srv = new GlideRecord("cmdb_ci_service"); 
		srv.initialize();
		for (var i = 0; i < p.length; i++) { 
			srv.get('correlation_id', p[i].entityId );
			srv.setValue('correlation_id', p[i].entityId );  
			srv.setValue('correlation_display', 'DYNATRACE' );  
			srv.setValue('discovery_source', 'DYNATRACE');
			srv.setValue('name', p[i].displayName + ' (' + p[i].entityId + ')');  
			srv.setValue('operational_status', 1);
			if(p[i].discoveredName) {
				srv.setValue('short_description', p[i].discoveredName);  
			}
			if(p[i].serviceType) {
				srv.setValue('service_type', p[i].serviceType);
			}
			if(p[i].agentTechnologyType) {
				srv.setValue('agent', p[i].agentTechnologyType);
			}
			if(p[i].serviceTechnologyTypes) {
				var aS = "";
				var s = 0;
				for (var a in p[i].serviceTechnologyTypes) {
					aS += p[i].serviceTechnologyTypes[s];
					s++;
					if(s < p[i].serviceTechnologyTypes.length) {
						aS += ", ";
					}
				}
				srv.setValue('short_description', aS);
			}
			if(p[i].webServiceNamespace) {
				srv.setValue('fqdn', p[i].webServiceNamespace);
			}
			srv.update();
			// and store mapping in index table
			if(srv.getValue('sys_id') && srv.getValue('sys_id').toString() !== '') {
				index.get('meid', p[i].entityId);
				index.setValue('meid', p[i].entityId);
				index.setValue('configuration_item', srv.getValue('sys_id'));
				index.update();
			}
			
			// Start to create the application relationships
			var parent;
			var child;
	
			if(index.get('meid', p[i].entityId)) {
				parent = index.getValue('configuration_item');
				if(p[i].fromRelationships.calls) {
					for (var j = 0; j < p[i].fromRelationships.calls.length; j++) {
						if(index.get('meid',p[i].fromRelationships.calls[j])) {
							child = index.getValue('configuration_item');
							var rel = new GlideRecord("cmdb_rel_ci"); 
							rel.addQuery('parent', parent);
							rel.addQuery('child', child);
							rel.addQuery('type.sys_name', "Uses::Used by");
							rel.query();
							if(!rel.next()) { // do not add duplicate relations
								if(parent && child) {
									rel.initialize();
									rel.parent = parent;
									rel.child = child;
									rel.type.setDisplayValue("Uses::Used by");
									rel.insert();
								}
							} 
						}
					}
				}
				if(p[i].fromRelationships.runsOn) {
					for (var j = 0; j < p[i].fromRelationships.runsOn.length; j++) {
						if(index.get('meid',p[i].fromRelationships.runsOn[j])) {
							child = index.getValue('configuration_item');
							var rel = new GlideRecord("cmdb_rel_ci"); 
							rel.addQuery('parent', parent);
							rel.addQuery('child', child);
							rel.addQuery('type.sys_name', "Runs on::Runs");
							rel.query();
							if(!rel.next()) { // do not add duplicate relations
								if(parent && child) {
									rel.initialize();
									rel.parent = parent;
									rel.child = child;
									rel.type.setDisplayValue("Runs on::Runs");
									rel.insert();
								}
							} 
						}
					}
				}
			}
		}	
	}
}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-05-10 16:25:50</sys_created_on>
        <sys_id>f62720f54fdf1200dbec7bb28110c70b</sys_id>
        <sys_mod_count>107</sys_mod_count>
        <sys_name>Synchronize services job</sys_name>
        <sys_package display_value="Dynatrace CMDB Integration" source="x_dynat_ruxit">9f77f7a94f9f1200dbec7bb28110c7c2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Dynatrace CMDB Integration">9f77f7a94f9f1200dbec7bb28110c7c2</sys_scope>
        <sys_update_name>sysauto_script_f62720f54fdf1200dbec7bb28110c70b</sys_update_name>
        <sys_updated_by>wolfgang</sys_updated_by>
        <sys_updated_on>2018-10-30 11:48:40</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
