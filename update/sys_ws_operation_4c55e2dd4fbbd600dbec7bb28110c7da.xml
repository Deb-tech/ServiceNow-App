<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>true</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>9d97825b4fb75a00dbec7bb28110c7bd</enforce_acl>
        <http_method>POST</http_method>
        <name>Problem</name>
        <operation_script><![CDATA[// normalize the configured environment Urls
function urlClean(url) {
	url = url.trim();
	if(!url.startsWith("https://")) {
		url = "https://" + url;
	}
	if(url.endsWith("/")) {
		url = url.substring(0, url.length - 1);
	}
	if(!url.contains('.')) {
		url = url + ".live.dynatrace.com";
	}
	return url;
}

// Test notifications sent by Dynatrace
// are guaranteed to contain the URL
// https://www.example.com
// Making that value configurable (e.g. via System Property)
// would open up to break that contract by SNOW users.
function isTestNotification(problem) {
	var url = problem['url'];
	if (!url) {
		return false;
	}
	return url.contains("https://example.com");
}

// extract the environment id from the environment Url
function extractEnvId(url) {
	if(url.contains("/e/")) {
		return url.substring(url.indexOf("/e/")+3, url.length);
	}
	else {
		return url.substring(8, url.indexOf("."));
	}
}

// Use the problems REST API to fetch the problem details
function fetchProblemDetails(url, apiToken, mid, problem) {
	gs.debug("Dynatrace app fetch problem details for: " + url);
	// try to mach with CI 
	var problemid = problem['pid'];
	// create the incident
	srv = new GlideRecord("x_dynat_ruxit_problems"); 
	srv.initialize();
	
	// open CI to MEID mapping table
	var mapping = new GlideRecord("x_dynat_ruxit_ci_mapping"); 
	mapping.initialize(); 
	
	srv.setValue('number', problem['nr'] ); 
	srv.setValue('problem_id', problemid);  
	srv.setValue('problem_title', problem['title']);  
	srv.setValue('problem_state', problem['state']);  
	srv.setValue('problem_url', problem['url']);  
	srv.setValue('impact_level', problem['impact']);
	srv.setValue('details', problem['details'] );  
	srv.setValue('tags', '' + problem['tags'] );  
	
	// if this is a test notification it doesn't make any
	// sense to reach out to the tenant for problem details
	if (isTestNotification(problem)) {
		srv.update();
		return;
	}
	
	// fetch problem details
	var restMessage = new sn_ws.RESTMessageV2();
	if(mid) {
		restMessage.setMIDServer(mid);
		restMessage.setEccParameter( 'skip_sensor', 'true' );
	}
	
	var apiUrl = url + "/api/v1/problem/details/" + problemid;
	restMessage.setHttpMethod('get');
	restMessage.setRequestHeader('Authorization', 'Api-Token ' + apiToken);
	restMessage.setEndpoint(apiUrl);
	var pRes = -1;
	var retries = 5;
	var success = false;
	while(retries > 0 && !success) {
		try {
			pRes = restMessage.execute();
			status = pRes.getStatusCode();
			if(status == 200) {
				success = true;
			}
			else {
				gs.error("Dynatrace app failed to fetch problem details for: " + url + " status: " + status);
				gs.error("Dynatrace problem fetch retry count: " + retries);
			}
		}
		catch(Exception) {
			gs.error("Dynatrace app failed to fetch problem details for: " + url);
		}
		retries = retries - 1;
	}
	
	status = pRes.getStatusCode();
	gs.debug("Dynatrace app fetch problem status code: " + status);
	var pDetails;
	// in case we need to attach more than one affected CI with one incident we have to
	// fill the CIs Affected (task_ci) table 
	if(status == 200) {
		pDetails = new global.JSON().decode(pRes.getBody());
		
		srv.setValue('company', pDetails.result.rankedEvents[0].entityId);
		
		for(var x = 0; x < pDetails.result.rankedEvents.length; x++) {
			mapping.addQuery('dynatrace_meid', pDetails.result.rankedEvents[x].entityId);
			mapping.query();
			if(mapping.next()) {
				srv.setValue('company', mapping.getValue('company'));
				srv.setValue('configuration_item', mapping.getValue('sn_configuration_item'));
				srv.setValue('caller', mapping.getValue('caller'));
				srv.setValue('assignment_group', mapping.getValue('assignment_group'));
				srv.setValue('urgency', mapping.getValue('urgency'));
				srv.setValue('impact', mapping.getValue('impact'));
				srv.setValue('category', mapping.getValue('category'));
				srv.setValue('subcategory', mapping.getValue('subcategory'));
				break;
			}
		}
	}
	else {
		gs.error("Dynatrace app failed to fetch problem details with HTTP code: " + status);
		gs.error("Dynatrace app failed to fetch problem details for: " + apiUrl);
	}
	
	srv.update();
	
	// only add affected CIs if we open a problem
	if(status == 200) {
		// open CIs affected table
		var cis_aff = new GlideRecord("x_dynat_ruxit_affectedcis"); 
		// impacted_cis
		var imCis = "";
		for(var y = 0; y < pDetails.result.rankedEvents.length; y++) {	
			if(imCis.indexOf(pDetails.result.rankedEvents[y].entityId) == -1) { // avoid multiple identical entries
				imCis += pDetails.result.rankedEvents[y].entityId;
				if(y < pDetails.result.rankedEvents.length - 1) {
					imCis += ',';
				}
				// query for CI reference and store in table
				// open CI to MEID mapping table
				var m = new GlideRecord("x_dynat_ruxit_ci_mapping"); 
				m.initialize();
				m.addQuery('dynatrace_meid', pDetails.result.rankedEvents[y].entityId);
				m.query();
				if(m.next()) {
					cis_aff.initialize();
					cis_aff.setValue('problem', '' + problemid);
					cis_aff.setValue('affected_ci', m.getValue('sn_configuration_item'));
					cis_aff.insert();
				}

				// query for synced service, application or host CMDB CIs 
				var index = new GlideRecord("cmdb_ci"); 
				if(index.get('correlation_id', pDetails.result.rankedEvents[y].entityId)) {
					cis_aff.initialize();
					cis_aff.setValue('problem', '' + problemid);
					cis_aff.setValue('affected_ci', index.getValue('sys_id'));
					cis_aff.insert();
				}
			}
			srv.setValue('impacted_cis', imCis);
			srv.update();
		}	
	} 
	else {
		gs.error("Dynatrace app failed to fetch problem details with HTTP code: " + status);
	}
}

// The new way of processing problem details without the need for backchannel
function processProblemDetails(pDetails) {
	gs.error("Wolfgang : YES YES");
	// create the incident
	srv = new GlideRecord("x_dynat_ruxit_problems"); 
	srv.initialize();
	srv.setValue('number', pDetails['nr'] ); 
	srv.setValue('problem_id', pDetails['pid']);  
	srv.setValue('problem_title', pDetails['title']);  
	srv.setValue('problem_state', pDetails['state']);  
	srv.setValue('problem_url', pDetails['url']);  
	srv.setValue('impact_level', pDetails['impact']);
	srv.setValue('details', pDetails['details'] );
	srv.setValue('tags', '' + pDetails['tags'].toString());  
	i_cis = ""; // impacted CI Dynatrace IDs
	i_ci_names = ""; // impacted CI names with attached Dynatrace types
	
	for(idx = 0; idx < pDetails['impactedEntities'].length; idx++) {
		i_cis += pDetails['impactedEntities'][idx]['entity'];
		i_ci_names += pDetails['impactedEntities'][idx]['type'] + ":" + pDetails['impactedEntities'][idx]['name'];
		if(idx == pDetails['impactedEntities'].length-1) {
			i_cis += ',';
			i_ci_names += ',';
		}
	}
	
	srv.setValue('impacted_cis', i_cis);
	srv.setValue('impacted_ci_names', i_ci_names);
	srv.setValue('environment', pDetails['environmentName']);
	srv.update();
}

(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	var requestBody = request.body; 
	
	gs.error("TOBIAS: " + requestBody.dataString);
	
	if(requestBody.data['impactedEntities']) {
		processProblemDetails(requestBody.data);
	}
	else { // old way, should get rid of this code when Dynatrace release version 165 is rolled out globally
		// We have to find the right environment where the problem was pushed from
		var environment = new GlideRecord('x_dynat_ruxit_environments');
		environment.query();   
		var found = false; 
		gs.debug("Dynatrace received problem: " + requestBody.data['url']);
		while (environment.next()) {   
			var apiUrl = urlClean(environment['dynatrace_environment_api_url']);
			// extract environment 
			var environmentId = extractEnvId(apiUrl); 
			gs.debug("Dynatrace configured environment: " + environmentId);
			var mid = null;
			if(environment['mid']) {
				mid = environment['mid'].name;
				gs.debug("Dynatrace uses a user defined MID server: " + mid);
			}

			var apiToken = environment['api_token'].getDecryptedValue();
			// check if we find the environment id within one of the configured environments
			if(requestBody.data['url'].contains(environmentId) || isTestNotification(requestBody.data)) {
				// now start to fetch the problem details
				fetchProblemDetails(apiUrl, apiToken, mid, requestBody.data);
				found = true;
				break;
			}
		}
		if(!found) {
			gs.error("Dynatrace problem received from an environment that is not configured within the environments list!");
		}
	}
})(request, response);]]></operation_script>
        <operation_uri>/api/x_dynat_ruxit/problem_notification</operation_uri>
        <produces>application/json</produces>
        <produces_customized>true</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-06-03 08:51:21</sys_created_on>
        <sys_id>4c55e2dd4fbbd600dbec7bb28110c7da</sys_id>
        <sys_mod_count>198</sys_mod_count>
        <sys_name>Problem</sys_name>
        <sys_package display_value="Dynatrace CMDB Integration" source="x_dynat_ruxit">9f77f7a94f9f1200dbec7bb28110c7c2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Dynatrace CMDB Integration">9f77f7a94f9f1200dbec7bb28110c7c2</sys_scope>
        <sys_update_name>sys_ws_operation_4c55e2dd4fbbd600dbec7bb28110c7da</sys_update_name>
        <sys_updated_by>admin2</sys_updated_by>
        <sys_updated_on>2019-03-05 07:28:15</sys_updated_on>
        <web_service_definition display_value="Problem Notification">37c462dd4fbbd600dbec7bb28110c7ac</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
