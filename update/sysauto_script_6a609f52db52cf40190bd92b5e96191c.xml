<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>false</active>
        <condition/>
        <conditional>false</conditional>
        <name>Dynatrace CMDB Sync</name>
        <run_as/>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:10:00</run_period>
        <run_start>2017-11-10 13:32:02</run_start>
        <run_time>1969-12-31 23:01:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[var hostTypes = {
	'LINUX' : 'cmdb_ci_linux_server', 
	'WINDOWS' : 'cmdb_ci_win_server', 
	'AIX' : 'cmdb_ci_aix_server'
};

var appServers = ['TOMCAT', 'NGINX', 'IIS', 'NODE_JS', 'APACHE_HTTP', 'JETTY', 'GO'];
var appServerMapping = {
		'TOMCAT' : 'cmdb_ci_app_server_tomcat', 
		'NGINX' : 'cmdb_ci_nginx_web_server', 
		'IIS' : 'cmdb_ci_microsoft_iis_web_server',
		'NODE_JS' : 'cmdb_ci_app_server',
		'APACHE_HTTPD' : 'cmdb_ci_apache_web_server',
		'JETTY' : 'cmdb_ci_app_server',
		'GO' : 'cmdb_ci_app_server'
	};

var itemIndex = {};
var pl = {};
pl['items'] = [];
pl['relations'] = [];

var sysIds = {};

function extractTags(tj) {
	var sb = [];
	for(i = 0; i < tj.length; i++) {
		t = "";
		if(tj[i]['context'].toLowerCase() !== 'contextless'){
			t = '[' + tj[i]['context'] + ']';
		}
		t += tj[i]['key'];
		if(tj[i]['value']) {
			t += ':' + tj[i]['value'];
		}
		sb.push(t);
	}
	sb[sb.length-1] = sb[sb.length-1] + ','; 
	return sb.join();
	//gs.error(sb.join());
	//gs.error(JSON.stringify(tj));
}

function addRelationship(parentDTid, childDTid, type) {
	//gs.debug(JSON.stringify({"parent": itemIndex[parentDTid], "child": itemIndex[childDTid], "type": type}));
	pl['relations'].push({"parent": itemIndex[parentDTid], "child": itemIndex[childDTid], "type": type});
}

function pullApplicationProcessesForServer(hostId, mid, token) {
	//gs.debug("Fetch processes for: " + hostId);
	var restMessage = new sn_ws.RESTMessageV2();
	if(mid) {
		restMessage.setMIDServer(mid);
		restMessage.setEccParameter( 'skip_sensor', 'true' );
	}
	var processUrl = apiUrl + "/api/v1/entity/infrastructure/processes?relativeTime=hour&host=" + hostId;
	restMessage.setHttpMethod('get');
	restMessage.setRequestHeader('Authorization', 'Api-Token ' + token);
	restMessage.setEndpoint(processUrl);
	var response = restMessage.execute();
	status = response.getStatusCode();
	if(status == 200) {
		var p = new global.JSON().decode(response.getBody());	
		for(x = 0; x < p.length; x++) {
			for(j = 0; j < appServers.length; j++) {
				if(dyn.isTechnology(p[x], appServers[j])) {
					// only add it if process group instance hosts a service on top
					if( p[x]['toRelationships']['runsOnProcessGroupInstance']) {
						var item = {};
						item['className'] = appServerMapping[appServers[j]];
						// fill discovered host attributes
						var values = {};
						values['name'] = p[x]['discoveredName'];
						values[gs.getProperty('x_dynat_ruxit.sync_field_name')] = p[x]['entityId'];
						if(p[x]['metadata'] && p[x]['metadata']['executablePaths'] && p[x]['metadata']['executablePaths'].length > 0) {
							values['running_process_command'] = p[x]['metadata']['executablePaths'][0];
							values['running_process_key_parameters'] = p[x]['metadata']['commandLineArgs'][0];
						}
						
						if(p[x]['listenPorts'] && p[x]['listenPorts'].length > 0) {
							values['tcp_port'] = p[x]['listenPorts'][0];
						}
						
						var first = new Date(p[x]['firstSeenTimestamp']);
						var last = new Date(p[x]['lastSeenTimestamp']);
						values['short_description'] = '';
						values['first_discovered'] = first.toISOString().replace('T', ' ');
						values['last_discovered'] = last.toISOString().replace('T', ' ');
						item['values'] = values;

						// add new item to payload and store its payload index
						pl['items'].push(item);	
						itemIndex[p[x]['entityId']] = pl['items'].length - 1; // remember the itemIndex for that Dynatrace id

						// now add relationship
						addRelationship(p[x]['entityId'], p[x]['fromRelationships']['isProcessOf'][0], 'Runs on::Runs');
					}
				}
			}
		}
	}
	else {
		gs.error("Dynatrace Service Maps app failed to processes from host: " + hostId + "  HTTP status: " + status);
	}
} 

function processIdentificationResult(output, pItems) {
	//gs.debug("Dynatrace processing the identification engine output: ");
	resItems = JSON.parse(output)['items'];
	for(it = 0; it < resItems.length; it++) {
		// store the identified sys_id along with the Dynatrace id, so that we can refer to it later when we create the application services
		sysIds[pItems[it]['values']['correlation_id']] = resItems[it]['sysId'];
	}
}


// fetches all hosts, processes and process groups from Dynatrace API and 
// creates or updates SNOW server, web servers and services
// Hosts and their relationships are tagged filtered.
function createUpdateServers(tagFilter, apiUrl, token, mid) {
	var hosts = {};
	var processes = {};
	var restMessage = new sn_ws.RESTMessageV2();
	if(mid) {
		restMessage.setMIDServer(mid);
		restMessage.setEccParameter( 'skip_sensor', 'true' );
	}
	var hostsUrl = apiUrl + "/api/v1/entity/infrastructure/hosts?relativeTime=hour" + tagFilter;
	restMessage.setHttpMethod('get');
	restMessage.setRequestHeader('Authorization', 'Api-Token ' + token);
	restMessage.setEndpoint(hostsUrl);
	var response = restMessage.execute();
	status = response.getStatusCode();
	if(status == 200) {
		var p = new global.JSON().decode(response.getBody());	
		gs.debug("Dynatrace hosts : " + p.length);
		for (var i = 0; i < p.length; i++) { 
			var key = p[i]['entityId'];
			hosts[key] = p[i];
			var item = {};
			item['className'] = hostTypes[p[i]['osType']];
			// fill discovered host attributes
			var values = {};
			values['name'] = dyn.shortHostName(hosts[key]['discoveredName']);
			values[gs.getProperty('x_dynat_ruxit.sync_field_name')] = key;
			values['os'] = dyn.extractOperatingSystem(p[i]['osType'], hosts[key]['osVersion']);
			values['os_version'] = dyn.extractOperatingSystemVersion(p[i]['osType'], hosts[key]['osVersion']);
			values['cpu_type'] = hosts[key]['osArchitecture'];
			values['cpu_core_count'] = hosts[key]['cpuCores'];
			values['operational_status'] = "1";
			values['ip_address'] = dyn.extractIp(hosts[key]['ipAddresses']);
			values['comments'] = extractTags(hosts[key]['tags']);
			var first = new Date(hosts[key]['firstSeenTimestamp']);
			var last = new Date(hosts[key]['lastSeenTimestamp']);
			values['short_description'] = '';
			values['first_discovered'] = first.toISOString().replace('T', ' ');
			values['last_discovered'] = last.toISOString().replace('T', ' ');
			item['values'] = values;
			
			// add new item to payload and store its payload index
			pl['items'].push(item);	
			itemIndex[key] = pl['items'].length - 1; // remember the itemIndex for that Dynatrace id
			
			if(gs.getProperty('x_dynat_ruxit.import_app_servers') == 'true') {
				pullApplicationProcessesForServer(key, mid, token);
			}
			
			// send the result to the identification and reconciliation Engine
			var input = new global.JSON().encode(pl);
			//gs.debug("Dynatrace host payload: " + global.JSON.stringify(pl));
			var output = sn_cmdb.IdentificationEngine.createOrUpdateCI(gs.getProperty('x_dynat_ruxit.discovery_source'), input);	
			// check for errors and save the sys_ids
			processIdentificationResult(output, pl['items']);
			
			// empty payload for next environment
			pl['items'] = [];
			pl['relations'] = [];
			itemIndex = {};
		}
	}	
	else {
		gs.error("Dynatrace Service Maps app failed to pull hosts with HTTP status: " + status);
	}
}

function createUpdateServices(tagFilter, apiUrl, token, mid) {
	var restMessage = new sn_ws.RESTMessageV2();
	if(mid) {
		restMessage.setMIDServer(mid);
		restMessage.setEccParameter( 'skip_sensor', 'true' );
	}
	// cmdb_ci_service_discovered
	var sericesUrl = apiUrl + "/api/v1/entity/services?relativeTime=hour" + tagFilter;
	restMessage.setHttpMethod('get');
	restMessage.setRequestHeader('Authorization', 'Api-Token ' + token);
	restMessage.setEndpoint(sericesUrl);
	var response = restMessage.execute();
	status = response.getStatusCode();
	if(status == 200) {
		var p = new global.JSON().decode(response.getBody());	
		gs.debug("Dynatrace services : " + p.length);
		for (var l = 0; l < p.length; l++) { 
			var key = p[l]['entityId'];
			var appService = {};
			appService[gs.getProperty('x_dynat_ruxit.sync_field_name')] = key; 
			appService['discovery_source'] = gs.getProperty('x_dynat_ruxit.discovery_source'); 
			appService['name'] = p[l]['displayName']; 
			appService['operational_status'] = 1; 
			var first = new Date(p[l]['firstSeenTimestamp']);
			var last = new Date(p[l]['lastSeenTimestamp']);
			appService['first_discovered'] = first; 
			appService['last_discovered'] = last; 
			var serviceRel = [];
			// add endpoint
			// add runsOn relationship
			if(p[l]['fromRelationships']['runsOnProcessGroupInstance']) {
				for(o = 0; o < p[l]['fromRelationships']['runsOnProcessGroupInstance'].length; o++) {
					//dyn.mapEndpoint(dis_ser.getValue('sys_id'), p[l]['fromRelationships']['runsOnProcessGroupInstance'][o]);
					var ci = new GlideRecord('cmdb_ci');
					ci.addQuery('correlation_id', p[l]['fromRelationships']['runsOnProcessGroupInstance'][o]); 
					ci.query();
					if(ci.next()) { 
						// add it
						serviceRel.push({'parent' : '', 'child' : ci.getValue('sys_id')});
					}
				}
			}
			appService['service_relations'] = serviceRel;

			var as = new global.appservice();
			aRes = as.processJSON_manualService(appService);
		
			// add service to service group
			if(p[l]['managementZones']) {
				for(var m=0; m<p[l]['managementZones'].length; m++) {
					dyn.setServiceGroup(aRes['sys_id'], p[l]['managementZones'][m]['name']);
				}
			}
		}
	}
}

var dyn = new dynatrace();
var as = new global.appservice();

// read all configured environments and sync the components
var environment = new GlideRecord('x_dynat_ruxit_environments');
environment.query();   
while (environment.next()) {   
	var apiUrl = dyn.urlClean(environment['dynatrace_environment_api_url']);
	var isActive = "" + environment['active'];
	if (isActive == "false") {
		gs.debug("Skipping Dynatrace service map sync for environment (not active): " + apiUrl);
		continue;
	}

	gs.debug("Dynatrace Service Map sync for environment: " + apiUrl);
	var apiToken = environment['api_token'].getDecryptedValue();
	var mid = null;
	if(environment['mid']) {
		mid = environment['mid'].name;
		gs.debug("Dynatrace uses a user defined MID server: " + mid);
	}
	var tagString = "";
	if(environment['filter_tags']) {
		tagString = environment['filter_tags'];
	}
	var tagUrlParam = '';
	if(!tagString.trim().equals('')) {
		var tags = tagString.split(',');
		for(var i=0; i<tags.length; i++) {
			tagUrlParam += '&tag=' + encodeURI(tags[i].trim());
		} 
	}
	gs.debug("Dynatrace service map sync filter tags: " + tagUrlParam);
	// create hosts and application servers
	if(gs.getProperty('x_dynat_ruxit.import_servers') == 'true') {
		createUpdateServers(tagUrlParam, apiUrl, apiToken, mid);
	}
	// create all relevant application services
	if(gs.getProperty('x_dynat_ruxit.import_application_services') == 'true') {
		createUpdateServices(tagUrlParam, apiUrl, apiToken, mid);
	}
}
]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>Admin</sys_created_by>
        <sys_created_on>2017-11-10 13:39:35</sys_created_on>
        <sys_id>6a609f52db52cf40190bd92b5e96191c</sys_id>
        <sys_mod_count>365</sys_mod_count>
        <sys_name>Dynatrace CMDB Sync</sys_name>
        <sys_package display_value="Dynatrace CMDB Integration" source="x_dynat_ruxit">9f77f7a94f9f1200dbec7bb28110c7c2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Dynatrace CMDB Integration">9f77f7a94f9f1200dbec7bb28110c7c2</sys_scope>
        <sys_update_name>sysauto_script_6a609f52db52cf40190bd92b5e96191c</sys_update_name>
        <sys_updated_by>admin2</sys_updated_by>
        <sys_updated_on>2019-03-16 17:35:27</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
